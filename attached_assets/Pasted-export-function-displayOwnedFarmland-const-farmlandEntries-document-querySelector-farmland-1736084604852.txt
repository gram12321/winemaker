export function displayOwnedFarmland() {
  const farmlandEntries = document.querySelector('#farmland-entries');
  farmlandEntries.innerHTML = ''; // Clear existing entries
  const farmlands = JSON.parse(localStorage.getItem('ownedFarmlands')) || [];
  const resourceOptions = allResources.map(resource => `<option value="${resource.name}">${resource.name}</option>`).join('');
  const selectedUnit = getUnit(); // Get the current unit setting

  farmlands.forEach((farmland, index) => {
    const landSize = convertToCurrentUnit(farmland.acres);
    const row = document.createElement('tr');

    // Check if there's an active task on this field
    const isTaskActiveOnField = activeTasks.some(task => task.fieldId === index);
    const canPlant = !isTaskActiveOnField && !farmland.plantedResourceName;
    const canUproot = !isTaskActiveOnField && farmland.plantedResourceName;
    const canClear = !isTaskActiveOnField && !farmland.plantedResourceName && farmland.canBeCleared !== 'Cleared';

    row.innerHTML = `
      <td><img src="/assets/pic/vineyard_dalle.webp" alt="Vineyard Image" style="width: 100px; height: auto;"></td>
      <td>${farmland.name}</td>
      <td>
        ${getFlagIcon(farmland.country)}
        ${farmland.country}, ${farmland.region}
      </td>
      <td>${formatNumber(landSize)} ${selectedUnit}</td>
      <td>${farmland.plantedResourceName || 'None'}</td>
      <td class="planting-options-column">
        <select class="form-control resource-select">
          ${resourceOptions}
        </select>
      </td>
      <td>
        <button class="btn btn-warning plant-field-btn mt-2 ${canPlant ? '' : 'disabled-btn'}" ${canPlant ? '' : 'disabled'}>Plant</button>
        <button class="btn btn-danger uproot-field-btn mt-2 ${canUproot ? '' : 'disabled-btn'}" ${canUproot ? '' : 'disabled'}>Uproot</button>
        <button class="btn btn-info clear-field-btn mt-2 ${canClear ? '' : 'disabled-btn'}" ${canClear ? '' : 'disabled'}>Clear</button>
      </td>
    `;

    farmlandEntries.appendChild(row);

    // Add event listener to open overlay on non-interactive element click
    row.addEventListener('click', (event) => {
      const isInteractiveElement = event.target.classList.contains('resource-select')
        || event.target.classList.contains('plant-field-btn')
        || event.target.classList.contains('uproot-field-btn')
        || event.target.classList.contains('clear-field-btn');

      if (!isInteractiveElement) {
        showFarmlandOverlay(farmland); // Pass only the current farmland's data
      }
    });

    // Adjusted Planting Logic to show the planting overlay
    const plantButton = row.querySelector('.plant-field-btn');
    plantButton.addEventListener('click', (event) => {
      if (!plantButton.disabled) {
        event.stopPropagation();

        // Open the planting overlay
        showPlantingOverlay(farmland, () => {
          const resourceSelect = row.querySelector('.resource-select');
          const selectedResource = resourceSelect.value;
          const additionalTaskParams = { fieldId: index, resourceName: selectedResource };
          handleGenericTask("Planting", (task, mode) => fieldTaskFunction(task, mode, "Planting", additionalTaskParams), additionalTaskParams);
          displayOwnedFarmland();
        });
      }
    });

    // Updated Uprooting Logic
    const uprootButton = row.querySelector('.uproot-field-btn');
    uprootButton.addEventListener('click', (event) => {
      if (!uprootButton.disabled) {
        event.stopPropagation();
        handleGenericTask('Uprooting', (task, mode) => fieldTaskFunction(task, mode, "Uprooting", { fieldId: index }), { fieldId: index });
        displayOwnedFarmland();
      }
    });

    // Clear field button logic
    const clearButton = row.querySelector('.clear-field-btn');
    clearButton.addEventListener('click', (event) => {
      if (!clearButton.disabled) {
        event.stopPropagation();
        handleGenericTask('Clearing', (task, mode) => fieldTaskFunction(task, mode, "Clearing", { fieldId: index }), { fieldId: index });
        displayOwnedFarmland();
      }
    });
  });
}