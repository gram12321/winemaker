---
description: 
globs: 
alwaysApply: true
---
# general-ai-rules.mdc

## AI Code Generation Principles for Winery Management Game

### ðŸ’¡ ALWAYS, IN EVERY RESPONS
- Read [readme.md](mdc:docforai/readme.md), [AI-BRIEFING.md](mdc:docforai/AI-BRIEFING.md) [general-ai-rules-updated.mdc](mdc:.cursor/rules/general-ai-rules-updated.mdc) and [tailwind-ui-guidelines-updated.mdc](mdc:.cursor/rules/tailwind-ui-guidelines-updated.mdc) 
 - Dont use npm run build or npm run dev, unless specific told to. The user allready has a dev server running
 - DO NOT make import of files/functions you do not know for sure excist. If you wanna make imports, be sure check the excisting of those files/functions before using them
- always use named imports. Avoid using default exports 

### ðŸ’¡ Project Summary
- This is a iteration of a old project. The old project is localted im \winemaker_old or [readme_old.md](mdc:docforai/readme_old.md) for references
- Turn-based single-player simulation game.
- Ideas and future/planned imporovements in [ideer.txt](mdc:docforai/ideer.txt)
- Built with **React + TypeScript** as a **Single Page Application (SPA)**.
- No Next.js, no routing. All views are handled via conditional rendering.
- Uses **Firebase (Firestore + Auth + Functions)** as backend.

---

### âœ… Architecture Rules
1. Use **Tailwind CSS** for styling. No Bootstrap or custom CSS in this iteration.
2. Avoid overlays, sidebars, or panels. Use modular full-screen views only. (except a topbar for navigation)
3. Navigation is handled using a `view` string â€” **not via routing** or `<Route>` components.
4. Core logic and state should live in `gameState.ts`. Components should never hold business logic.
5. Minimize React hooks â€” avoid `useEffect`, `useReducer`, etc. unless needed for UI behavior.
6.  **All database operations must be in `src/lib/database/*` services**, never directly in components or views.
7. Simulated NPC buyers â€” no multiplayer, market, or real-time interactions.

---

### ðŸ“¦ Game Design Conventions
- Economy is deterministic, driven by formulas.
- Players never interact directly. There are no real-time mechanics or shared world state.
- Wine is sold via simulated contracts or importers â€” not market-based.
- Data such as players, vineyards, production, prices, etc. are defined with clear TypeScript types.

---

### ðŸ“š Code Understanding Guidelines
1. **Read Full Files**: Always read the entire file you're modifying to understand all related functions and variables.
2. **Look for Existing Patterns**: Before creating new functions, check if similar ones already exist.
3. **Enum Handling**: Always use existing enum values (WorkCategory, etc.) rather than creating new ones.
4. **Check Related Files**: When modifying one file, also examine related files that might be affected.
5. **Understand Domain Logic**: Each game system (work calculation, activities) has specific domain logic.
6. **Use Correct Categories**: Use specific work categories (PLANTING, HARVESTING) not generic ones.
7. **Check Constants**: Always review constant files and existing values before creating new ones.
8. **Cross-Reference**: If modifying a feature, check both old and new implementations to maintain consistency.

---

### ðŸ§  AI Prompting Style
When asked to generate code:
- Assume **React + TypeScript + Tailwind**, no routing.
- Use `gameState.ts` as the data source for all gameplay logic.
- Prioritize simplicity, clarity, and maintainability.
